plugins {
  id 'java'
  id 'org.springframework.boot' version '3.2.0'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'cz.habarta.typescript-generator' version '3.2.1263'
  id 'org.siouan.frontend-jdk17' version '8.0.0'
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  classes = [
    'io.techwolf.gvs.application.energy.ReadingsDto',
    'io.techwolf.gvs.application.energy.ReadingsResponse',
    'io.techwolf.gvs.application.energy.SingleValueResponse'
  ]
  outputKind = 'module'
  outputFileType = 'implementationFile'
  outputFile = './src/ts/src/app/api.ts'
}

group = 'io.techwolf.gvs'
version = '0.0.9'

java {
  sourceCompatibility = '17'
}

springBoot {
  buildInfo()
}

sourceSets {
  main {
    java.srcDirs += 'build/generated/sources/annotationProcessor/java/main'
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
  implementation 'org.flywaydb:flyway-core'
  implementation 'org.mapstruct:mapstruct:1.4.2.Final'
  implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
  runtimeOnly 'com.h2database:h2'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'io.rest-assured:rest-assured:5.4.0'
  testImplementation 'org.hamcrest:hamcrest-all:1.3'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  implementation 'org.apache.commons:commons-lang3:3.14.0'
  implementation 'commons-io:commons-io:2.15.1'


}

task buildDockerImage(type: Exec) {
  commandLine './build-image.sh', project.version
}

task publishDockerImage(type: Exec) {
  commandLine './publish-image.sh', project.version
}

task publishMultiarchDockerImage(type: Exec) {
  commandLine './publish-multiarch-image.sh', project.version
}

tasks.named('test') {
  useJUnitPlatform()
}

frontend {
  nodeVersion = "20.10.0"
  assembleScript = "run build"
  cleanScript = "run clean"
  verboseModeEnabled = true
  packageJsonDirectory = file("./src/main/ts/")
}
